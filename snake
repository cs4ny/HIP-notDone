# HIP
# SNAKE GAME

import pygame
import math
import random

#GLOBAL
COLOUR = [(255,255,255),(0,0,0),(96,96,96),
          (255,0,0),(0,255,0),(0,0,255),
          (255,255,0),(255,0,255),(255,120,0)]

WHITE = 0
BLACK = 1
GREY = 2
RED = 3
GREEN = 4
BLUE = 5
YELLOW = 6
PURPLE = 7
ORANGE =8

SCREEN_WIDTH = 500
SCREEN_HEIGHT = 500
SCREEN_SIZE = (SCREEN_WIDTH,SCREEN_HEIGHT)


class Object():
    def __init__(self,x,y,colour,shape):
        global SCREEN_WIDTH
        global SCREEN_HEIGHT
        
        self.x = x
        self.y = y
        self.dx = 0
        self.dy = 0
        self.size = 20
        self.colour = colour
        self.shape = shape

    def draw(self,screen):
        if self.shape == 'rect':
            pygame.draw.rect(screen,COLOUR[self.colour],[self.x,self.y,self.size,self.size])
        if self.shape == ' cir':
            pygame.draw.ellipse(screen,COLOUR[self.colour],[self.x,self.y,self.size,self.size])

    def update(self):
        self.x += self.dx
        self.y += self.dy

    def setdx(self,dx):
        self.dx = dx

    def setdy(self,dy):
        self.dy = dy

    def getInfo(self):
        return[self.x,self.y,self.size,self.size]


# GAME CLASS
class Game():
    def __init__(self):
        global SCREEN_WIDTH
        global SCREEN_HEIGHT

        #Initialize
        pygame.init()
        self.screen = pygame.display.set_mode(SCREEN_SIZE)
        clock = pygame.time.Clock()

        self.initialize()

        loop = True
        while loop:
            # Process Events/ Game Logic/ Draw/ Pause
            loop = self.processEvents()
            self.runLogic()
            self.displayFrame()
            clock.tick(self.frameRate)

        pygame.quit()

    def initialize(self):

        self.snakeList = []

        for i in range(2):
            x = 20 - 20 * i
            y = 0
            self.snake = Object(x,y,ORANGE,'rect')
            self.snakeList.append(self.snake)

        self.dx = 20
        self.dy = 0

        self.numRC = 30
        self.grid = []
        for rows in range(self.numRC):
            self.grid.append([])
            for colums in range(self.numRC):
                self.grid[rows].append(0)

        self.foodList = 0
        self.maxFood = 1

        self.timer = 0

        self.gameOver = False
        self.gameWin = False

        self.frameRate = 3

    def processEvents(self):

        loop = True
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                loop = False

            # KeyDown
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    if self.dx != 20:
                        self.dx = -20
                        self.dy = 0
                elif event.key == pygame.K_RIGHT:
                    if self.dx != -20:
                        self.dx = 20
                        self.dy = 0
                elif event.key == pygame.K_UP:
                    if self.dy != 20:
                        self.dy = -20
                        self.dx = 0
                elif event.key == pygame.K_DOWN:
                    if self.dy != -20:
                        self.dy = 20
                        self.dx = 0
                elif event.key == pygame.K_SPACE:
                    self.initialize()

        return loop
    
    def runLogic(self):

        if self.gameOver == False and self.gameWin == False:
            if len(self.snakeList ) > 300:
                self.gameOver = True
                sel.gameWin = True

        self.snakeList.pop()

        self.x = self.snakeList[0].x + self.dx
        self.y = self.snakeList[0].y + self.dy
        self.newSnake = Object(self.x,self.y,ORANGE,'rect')

        self.snakeList.insert(0,self.newSnake)

        self.timer += 1
        if self.timer > 100:
            self.maxFodd += 1
            self.timer = 0
            self.frameRate+= 1

        if self.foodList< self.maxFood:
            self.foodList += 1
            self.ranFoodC = random.randrange(self.numRC)
            self.ranFoodR = random.randrange(self.numRC)
            self.grid[self.ranFoodC][self.ranFoodR] = 1

        for snakes in self.snakeList:
            if snakes.x < 0 or snakes.x + 20 > SCREEN_WIDTH or snakes.y< 0 or snakes.y + 20 > SCREEN_HEIGHT:
                self.gameOver = True

        index = 1
        while index < len(self.snakeList):
            index +=1

            try:
                if self.x // 20 == (self.snakeList[index+1].x + self.dx)//20 and self.y //20 == (self.snakeList[index+1].y +self.dy) //20:
                    self.gameOver = True
            except:
                pass


        try:
            if self.grid[self.x//20][self.y//20] == 1:

                self.grid[self.x//20][self.y//20] == 0
                self.foodList -= 1

                self.x = self.snakeList[0].x + self.dx
                self.y = self.snakeList[0].y + self.dy
                self.segment = Object(self.x,self.y,GREEN,'rect')

                self.snakeList.insert(0,self.segment)

        except:
            pass

    def displayFrame(self):
        self.screen.fill(COLOUR[WHITE])
        if self.gameOver == False:
            for snakes in self.snakeList:
                snakes.draw(self.screen)

            for rows in range(self.numRC):
                for colums in range(self.numRC):
                    if self.grid[rows][colums]== 1:
                        pygame.draw.ellipse(self.screen,COLOUR[RED],[rows*20,colums*20,20,20])

            for rows in range(self.numRC):
                pygame.draw.line(self.screen,COLOUR[BLACK],(0,rows*20),(SCREEN_WIDTH,rows*20),1)

            for columns in range(self.numRC):
                pygame.draw.line(self.screen,COLOUR[BLACK],(columns*20,0),(columns*20,SCREEN_HEIGHT),1)

            pygame.display.flip()
        else:

            if self.gameWin == False:
                self.over = 'GAME OVER'

            else:
                self.over = 'YOU WIN'
            self.font = pygame.font.SysFont('serif',40)
            self.text = self.font.render(str(self.over), True, COLOUR[BLACK])
            self.screen.blit(self.text,[SCREEN_WIDTH // 10, SCREEN_HEIGHT // 3])

        pygame.display.flip()

# Game()
Game()

        
