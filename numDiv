#HIP
#NUM DIVISORS

def main():
    """ This program will find the number of divisors """

    # Loop
    while True:
        number = int(input("Please enter a number: "))
        factorList = primeFactor(number)
        powerList = powerFind(factorList)
        totaldiv = totDiv(powerList)

        print("The number of divisor for ", number, "is ",totaldiv)


def primeFactor(number):

    # Initialize some values
    index = 0
    factorList = []
    factor = 1

    # All possible prime factors
    numberList = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,
                  31, 37, 41, 43, 47, 53, 59, 61, 67,
                  71, 73, 79, 83, 89, 97, 101, 103, 107,
                  109, 113, 127, 131, 137, 139, 149, 151,
                  157, 163, 167, 173, 179, 181, 191, 193,
                  197, 199, 211, 223, 227, 229, 233, 239,
                  241, 251, 257, 263, 269, 271, 277, 281,
                  283, 293, 307, 311, 313, 317, 331, 337,
                  347, 349, 353, 359, 367, 373, 379, 383,
                  389, 397, 401, 409, 419, 421, 431, 433,
                  439, 443, 449, 457, 461, 463, 467, 479,
                  487, 491, 499, 503, 509, 521, 523, 541,
                  547, 557, 563, 569, 571, 577, 587, 593,
                  599, 601, 607, 613, 617, 619, 631, 641,
                  643, 647, 653, 659, 661, 673, 677, 683,
                  691, 701, 709, 719, 727, 733, 739, 743,
                  751, 757, 761, 769, 773, 787, 797, 809,
                  811, 821, 823, 827, 829, 839, 853, 857,
                  859, 863, 877, 881, 883, 887, 907, 911,
                  919, 929, 937,941, 947, 953, 967, 971,
                  977, 983, 991, 997]

    # Loop
    while number!=1:
        while index < len(numberList):

            # Check for divisibility
            if number % numberList[index] == 0:
                number = number / numberList[index]
                factorList.append(numberList[index])
                index = 0
            else:
                index += 1

        # Append prime factor to factor lsit
        factorList.append(number)

        # Stop if can't divide
        number = 1

    # Return
    return factorList

def powerFind(factorList):
    """ This function find the number of occurnecs of certain factors and turn them into power """

    # Initialize
    powerList = []

    # Loop
    for index in range(len(factorList)):
        try:
            if factorList[index] != factorList[index+1]:
                power = factorList.count(factorList[index])
                powerList.append([factorList[index],power])
                powerN = factorList.count(factorList[index+1])
                powerList.append([factorList[index+1],powerN])

        except:
            pass


    # Get rid of repetitive
    powerList = sorted(powerList)
    nPowerList = [powerList[i] for i in range(len(powerList)) if i == 0 or powerList[i] != powerList[i-1]]
    nPowerList.pop(0)

    # Return
    return nPowerList


def totDiv(nPowerList):
    """ This function will return the total number of factors a number have """

    # Initialize (List comprehension?)
    powerL =[]

    # Adding one to power
    for liste in nPowerList:
        power = liste[1]
        power += 1
        powerL.append(power)

    # Take the product of the whole list
    numDiv = 1
    for number in powerL:
        numDiv *= number

    # Return
    return numDiv

#main()
main()

                     
